name: PRism Dashboard Creation

on:
  issue_comment:
    types: [created]
permissions:
  pull-requests: write
  contents: read
  issues: read

jobs:
  create-dashboard:
    if: github.event.issue.pull_request && (contains(github.event.comment.body, 'prism dashboard --create') || contains(github.event.comment.body, 'dashboard-create'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          
      - name: Build PRism
        run: go build -o prism
        
      - name: Parse Comment
        id: parse_comment
        run: |
          COMMENT="${{ github.event.comment.body }}"
          
          # Check for specific dashboard creation commands
          if [[ "$COMMENT" == *"prism dashboard --create --name"* ]]; then
            # Extract dashboard name
            DASHBOARD_NAME=$(echo "$COMMENT" | sed -n 's/.*prism dashboard --create \(.*\)/\1/p')
            echo "command=specific" >> $GITHUB_OUTPUT
            echo "dashboard=$DASHBOARD_NAME" >> $GITHUB_OUTPUT
          elif [[ "$COMMENT" == *"dashboard-create"* ]]; then
            # For the "dashboard-create" command from clicking the button
            DASHBOARD_INFO=$(echo "$COMMENT" | grep -o 'DASHBOARD_CREATE:[^:]*:[^-]*' | head -1)
            DASHBOARD_TYPE=$(echo "$DASHBOARD_INFO" | cut -d ':' -f 2)
            DASHBOARD_NAME=$(echo "$DASHBOARD_INFO" | cut -d ':' -f 3)
            echo "command=from_comment" >> $GITHUB_OUTPUT
            echo "dashboard_type=$DASHBOARD_TYPE" >> $GITHUB_OUTPUT
            echo "dashboard=$DASHBOARD_NAME" >> $GITHUB_OUTPUT
          else
            echo "command=all" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Dashboard
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          PR_NUMBER: ${{ github.event.issue.number }}
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          GRAFANA_SERVICE_ACCOUNT_TOKEN: ${{ secrets.GRAFANA_SERVICE_ACCOUNT_TOKEN }}
          GRAFANA_URL: ${{ secrets.GRAFANA_URL }}
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DATADOG_APP_KEY: ${{ secrets.DATADOG_APP_KEY }}
          DASHBOARD_NAME: ${{ steps.parse_comment.outputs.dashboard }}
          DASHBOARD_TYPE: ${{ steps.parse_comment.outputs.dashboard_type }}
          COMMAND_TYPE: ${{ steps.parse_comment.outputs.command }}
        run: |
          if [[ "$COMMAND_TYPE" == "specific" ]]; then
            echo "Creating specific dashboard: $DASHBOARD_NAME"
            ./prism dashboard --create --name "$DASHBOARD_NAME"
          elif [[ "$COMMAND_TYPE" == "from_comment" ]]; then
            echo "Creating dashboard from comment: $DASHBOARD_TYPE - $DASHBOARD_NAME"
            ./prism dashboard --create --name "$DASHBOARD_NAME" --type "$DASHBOARD_TYPE"
          else
            echo "Creating all suggested dashboards"
            ./prism dashboard --create-all
          fi
      
      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const dashboardName = process.env.DASHBOARD_NAME || "all dashboards";
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `âœ… Successfully created dashboard: ${dashboardName}`
            });