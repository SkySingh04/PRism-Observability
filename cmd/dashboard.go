// cmd/dashboard.go
package cmd

import (
	"PRism/config"
	"PRism/dashboard"
	"PRism/github"
	"PRism/llm"
	"bufio"
	"context"
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/spf13/cobra"
)

var (
	createFlag     bool
	createAllFlag  bool
	dashboardName  string
	dashboardType  string
	skipPromptFlag bool
)

var dashboardCmd = &cobra.Command{
	Use:   "dashboard",
	Short: "Generate Grafana and Amplitude dashboard of PR metrics and data",
	Long: `Generates a Grafana and Amplitude dashboard of PR metrics and data.
You can view visualizations of PR data, trends, and other insights.`,
	Run: func(cmd *cobra.Command, args []string) {
		runDashboard()
	},
}

func init() {
	rootCmd.AddCommand(dashboardCmd)

	// Add flags for CI/CD and specific dashboard creation
	dashboardCmd.Flags().BoolVar(&createFlag, "create", false, "Create a specific dashboard")
	dashboardCmd.Flags().BoolVar(&createAllFlag, "create-all", false, "Create all suggested dashboards")
	dashboardCmd.Flags().StringVar(&dashboardName, "name", "", "Name of the dashboard to create (used with --create)")
	dashboardCmd.Flags().StringVar(&dashboardType, "type", "", "Type of dashboard (grafana, amplitude, datadog)")
	dashboardCmd.Flags().BoolVar(&skipPromptFlag, "skip-prompt", false, "Skip interactive prompts (for CI/CD)")
}

func runDashboard() {
	log.Println("Starting dashboard generation...")

	cfg := config.LoadConfig()
	log.Println("Config loaded successfully")

	// Initialize GitHub client
	ctx := context.Background()
	githubClient := github.InitializeGithubClient(cfg, ctx)
	log.Println("GitHub client initialized")

	// Fetch PR details including diff
	log.Println("Fetching PR details...")
	prDetails, err := github.FetchPRDetails(githubClient, cfg)
	if err != nil {
		log.Fatalf("Error fetching PR details: %v", err)
	}
	log.Printf("Successfully fetched PR details for PR #%d", prDetails["number"])

	// Check for specific dashboard creation first
	if createFlag && dashboardName != "" {
		log.Printf("Creating specific dashboard: %s", dashboardName)
		createSpecificDashboard(cfg, dashboardName, dashboardType)
		return
	}

	// Read PRD content if provided
	prdContent := ""
	if cfg.PRDFilePath != "" {
		log.Printf("Attempting to read PRD file from: %s", cfg.PRDFilePath)
		content, err := os.ReadFile(cfg.PRDFilePath)
		if err != nil {
			log.Printf("Warning: Could not read PRD file: %v", err)
		} else {
			prdContent = string(content)
			log.Println("Successfully read PRD content")
		}
	}

	// Prepare prompt for Claude
	log.Println("Building dashboard prompt...")
	prompt := llm.BuildDashboardPrompt(prDetails, prdContent)
	log.Println("Dashboard prompt built successfully")

	// Call Claude API
	log.Println("Calling Claude API for dashboard suggestions...")
	suggestions, err, _, summary := llm.CallClaudeAPIForDashboards(prompt, cfg)
	log.Printf("Received summary from Claude: %s", summary)
	if err != nil {
		log.Fatalf("Error calling Claude API: %v", err)
	}

	if suggestions == nil || len(*suggestions) == 0 {
		log.Println("No dashboard suggestions were generated by Claude")
		return
	}

	log.Printf("Successfully received %d dashboard suggestions from Claude", len(*suggestions))

	// Log the suggestions
	for i, suggestion := range *suggestions {
		log.Printf("Dashboard suggestion %d: %s (%s) - Priority: %s", i+1, suggestion.Name, suggestion.Type, suggestion.Priority)
	}

	// Create PR comments if suggestions exist
	log.Println("Creating PR comments with dashboard suggestions...")
	err = github.CreateDashboardPRComments(*suggestions, prDetails, cfg, summary)
	if err != nil {
		log.Fatalf("Error creating Dashboard PR comments: %v", err)
	}
	log.Println("Successfully created PR comments")

	// Check if we should create all dashboards
	if createAllFlag {
		log.Println("Creating all suggested dashboards...")
		createAllDashboards(*suggestions, cfg)
		return
	}

	// Interactive prompt if not in CI/CD mode
	if !skipPromptFlag {
		reader := bufio.NewReader(os.Stdin)
		fmt.Println("\nDo you want to create these dashboards now? (y/n)")
		input, _ := reader.ReadString('\n')
		input = strings.TrimSpace(strings.ToLower(input))

		if input == "y" || input == "yes" {
			createAllDashboards(*suggestions, cfg)
		} else {
			log.Println("Dashboard creation skipped. You can create them later from the PR comments.")
		}
	}

	log.Println("Dashboard generation process completed")
}

// createSpecificDashboard attempts to load and create a specific dashboard by name
func createSpecificDashboard(cfg config.Config, name string, dashboardType string) {
	// Try to load saved suggestions from storage
	savedSuggestions, err := loadSavedDashboardSuggestions(cfg)
	if err != nil || savedSuggestions == nil || len(*savedSuggestions) == 0 {
		log.Fatalf("No saved dashboard suggestions found for PR #%d", cfg.PRNumber)
	}

	// Find the matching dashboard
	var targetSuggestion config.DashboardSuggestion
	found := false

	for _, suggestion := range *savedSuggestions {
		if suggestion.Name == name && (dashboardType == "" || suggestion.Type == dashboardType) {
			targetSuggestion = suggestion
			found = true
			break
		}
	}

	if !found {
		log.Fatalf("No dashboard found with name: %s", name)
	}

	// Create the dashboard
	log.Printf("Creating %s dashboard: %s", targetSuggestion.Type, targetSuggestion.Name)
	err = createDashboard(targetSuggestion, cfg)
	if err != nil {
		log.Fatalf("Error creating dashboard: %v", err)
	}
	log.Printf("Successfully created dashboard: %s", name)
}

// createAllDashboards creates all dashboards in the provided suggestions
func createAllDashboards(suggestions []config.DashboardSuggestion, cfg config.Config) {
	log.Println("Starting dashboard creation process...")
	for _, suggestion := range suggestions {
		log.Printf("Creating %s dashboard: %s", suggestion.Type, suggestion.Name)
		err := createDashboard(suggestion, cfg)
		if err != nil {
			log.Printf("Error creating %s dashboard '%s': %v", suggestion.Type, suggestion.Name, err)
		} else {
			log.Printf("Successfully created %s dashboard: %s", suggestion.Type, suggestion.Name)
		}
	}
	log.Println("Dashboard creation process completed")
}

// createDashboard creates a dashboard based on its type
func createDashboard(suggestion config.DashboardSuggestion, cfg config.Config) error {
	switch suggestion.Type {
	case "grafana":
		return dashboard.CreateGrafanaDashboard(suggestion, cfg)
	case "amplitude":
		return dashboard.CreateAmplitudeDashboard(suggestion, cfg)
	case "datadog":
		return dashboard.CreateDatadogDashboard(suggestion, cfg)
	default:
		return fmt.Errorf("unsupported dashboard type: %s", suggestion.Type)
	}
}

// loadSavedDashboardSuggestions loads previously generated dashboard suggestions
func loadSavedDashboardSuggestions(cfg config.Config) (*[]config.DashboardSuggestion, error) {
	// Implement storage/retrieval of dashboard suggestions
	// This could be from a file, database, or fetched from GitHub PR comments

	// For now, let's assume we're getting this from the PR
	ctx := context.Background()
	githubClient := github.InitializeGithubClient(cfg, ctx)

	// Implementation needed: Parse dashboard suggestions from PR comments
	suggestions, err := github.GetDashboardSuggestionsFromPR(githubClient, cfg)
	if err != nil {
		return nil, fmt.Errorf("error loading saved dashboard suggestions: %v", err)
	}

	return suggestions, nil
}
